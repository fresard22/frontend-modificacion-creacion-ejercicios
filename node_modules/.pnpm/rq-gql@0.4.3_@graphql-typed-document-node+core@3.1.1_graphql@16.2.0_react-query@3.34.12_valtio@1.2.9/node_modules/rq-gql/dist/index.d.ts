import type { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
import { FC } from "react";
import {
  QueryClientProviderProps,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
export declare type QueryFetcher = <
  TData = Record<string, any>,
  TVariables = Record<string, any>
>(
  query: string,
  variables?: TVariables | undefined
) => () => Promise<TData>;
export declare type FetchGQL = <
  TData = Record<string, any>,
  TVariables = Record<string, any>
>(
  queryDoc: DocumentNode<TData, TVariables> | string,
  variables?: TVariables | undefined
) => () => Promise<TData>;
export declare const rqGQLContext: import("react").Context<RQGQLClient | null>;
export declare class RQGQLClient {
  readonly headers: {
    [K in string]?: string;
  };
  readonly fetchOptions: {
    body?: BodyInit | null;
    cache?: RequestCache;
    credentials?: RequestCredentials;
    headers?: HeadersInit;
    integrity?: string;
    keepalive?: boolean;
    method?: string;
    mode?: RequestMode;
    redirect?: RequestRedirect;
    referrer?: string;
    referrerPolicy?: ReferrerPolicy;
    signal?: AbortSignal | null;
    window?: null;
  };
  readonly fetchGQL: FetchGQL;
  constructor(
    options: (
      | {
          queryFetcher: QueryFetcher;
          endpoint?: never;
        }
      | {
          queryFetcher?: never;
          endpoint: string;
        }
    ) & {
      headers?: {
        [K in string]?: string;
      };
      fetchOptions?: Partial<RequestInit>;
    }
  );
}
export declare const RQGQLProvider: FC<{
  rqGQLClient: RQGQLClient;
}>;
export declare const CombinedRQGQLProvider: FC<
  QueryClientProviderProps & {
    rqGQLClient: RQGQLClient;
  }
>;
export declare type DefaultQueryFetcherOptions = {
  headers?: {
    [K in string]?: string;
  };
  fetchOptions?: Partial<RequestInit>;
};
export declare const defaultQueryFetcher: (
  endpoint: string,
  options?: DefaultQueryFetcherOptions
) => QueryFetcher;
export declare function getKey<TVariables>(
  queryDoc: DocumentNode<any, TVariables> | string,
  variables?: TVariables
): readonly [string, TVariables?];
export declare function useGQLQuery<
  TData = Record<string, any>,
  TVariables = Record<string, any>
>(
  queryDoc: DocumentNode<TData, TVariables> | string,
  variables?: TVariables,
  options?: Omit<
    UseQueryOptions<TData, Error, TData, QueryKey>,
    "queryKey" | "queryFn"
  >
): UseQueryResult<TData, Error>;
export declare function useGQLMutation<
  TData = Record<string, any>,
  TVariables = Record<string, any>
>(
  queryDoc: DocumentNode<TData, TVariables> | string,
  options?: Omit<
    UseMutationOptions<TData, Error, TVariables, any>,
    "queryKey" | "queryFn"
  >
): UseMutationResult<TData, Error, TVariables>;
export declare function useGQLInfiniteQuery<
  TData = Record<string, any>,
  TVariables = Record<string, any>
>(
  queryDoc: DocumentNode<TData, TVariables> | string,
  getVariables: (pageParam?: any) => TVariables,
  options?: UseInfiniteQueryOptions<TData, Error, TData>
): UseInfiniteQueryResult<TData, Error>;
