'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const addPlugin = require('@graphql-codegen/add');
const typedDocumentNodePlugin = require('@graphql-codegen/typed-document-node');
const typescriptPlugin = require('@graphql-codegen/typescript');
const typescriptOperationPlugin = require('@graphql-codegen/typescript-operations');
const visitorPluginCommon = require('@graphql-codegen/visitor-plugin-common');
const plugin = require('./plugin.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  const n = Object.create(null);
  if (e) {
    for (const k in e) {
      if (k !== 'default') {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    }
  }
  n["default"] = e;
  return Object.freeze(n);
}

const addPlugin__namespace = /*#__PURE__*/_interopNamespace(addPlugin);
const typedDocumentNodePlugin__namespace = /*#__PURE__*/_interopNamespace(typedDocumentNodePlugin);
const typescriptPlugin__namespace = /*#__PURE__*/_interopNamespace(typescriptPlugin);
const typescriptOperationPlugin__namespace = /*#__PURE__*/_interopNamespace(typescriptOperationPlugin);

function processSources(sources, buildName) {
  var _a;
  const sourcesWithOperations = [];
  for (const source of sources) {
    const { document } = source;
    const operations = [];
    if (!(document == null ? void 0 : document.definitions))
      continue;
    for (const definition of document.definitions) {
      if ((definition == null ? void 0 : definition.kind) !== `OperationDefinition` && (definition == null ? void 0 : definition.kind) !== "FragmentDefinition" || ((_a = definition.name) == null ? void 0 : _a.kind) !== `Name`)
        continue;
      operations.push({
        initialName: buildName(definition),
        definition
      });
    }
    if (operations.length === 0)
      continue;
    sourcesWithOperations.push({
      source,
      operations
    });
  }
  return sourcesWithOperations;
}
const preset = {
  buildGeneratesSection: (options) => {
    const visitor = new visitorPluginCommon.ClientSideBaseVisitor(options.schemaAst, [], options.config, options.config);
    const sourcesWithOperations = processSources(options.documents, (node) => {
      if (node.kind === "FragmentDefinition") {
        return visitor.getFragmentVariableName(node);
      }
      return visitor.getOperationVariableName(node);
    });
    const sources = sourcesWithOperations.map(({ source }) => source);
    const pluginMap = {
      ...options.pluginMap,
      [`add`]: addPlugin__namespace,
      [`typescript`]: typescriptPlugin__namespace,
      [`typescript-operations`]: typescriptOperationPlugin__namespace,
      [`typed-document-node`]: typedDocumentNodePlugin__namespace,
      [`gen-dts`]: plugin
    };
    const plugins = [
      { [`add`]: { content: `/* eslint-disable */` } },
      { [`typescript`]: {} },
      { [`typescript-operations`]: {} },
      { [`typed-document-node`]: {} },
      ...options.plugins
    ];
    const genDtsPlugins = [
      { [`add`]: { content: `/* eslint-disable */` } },
      { [`gen-dts`]: { sourcesWithOperations } }
    ];
    return [
      {
        filename: `${options.baseOutputDir}/graphql.ts`,
        plugins,
        pluginMap,
        schema: options.schema,
        config: options.config,
        documents: sources
      },
      {
        filename: `${options.baseOutputDir}/index.ts`,
        plugins: genDtsPlugins,
        pluginMap,
        schema: options.schema,
        config: options.config,
        documents: sources
      }
    ];
  }
};

exports.preset = preset;
