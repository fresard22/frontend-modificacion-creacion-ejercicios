declare const enum AsRef {
}
export declare const ref: <T extends object>(o: T) => T & AsRef;
declare type Path = (string | symbol)[];
declare type Op = [op: 'set', path: Path, value: unknown, prevValue: unknown] | [op: 'delete', path: Path, prevValue: unknown] | [op: 'resolve', path: Path, value: unknown] | [op: 'reject', path: Path, error: unknown];
export declare const proxy: <T extends object>(initialObject?: T) => T;
export declare const getVersion: (proxyObject: unknown) => number | undefined;
export declare const subscribe: <T extends object>(proxyObject: T, callback: (ops: Op[]) => void, notifyInSync?: boolean | undefined) => () => void;
export declare type DeepResolveType<T> = T extends (...args: any[]) => any ? T : T extends AsRef ? T : T extends Promise<infer V> ? DeepResolveType<V> : T extends object ? {
    readonly [K in keyof T]: DeepResolveType<T[K]>;
} : T;
export declare const snapshot: <T extends object>(proxyObject: T) => DeepResolveType<T>;
export declare const getHandler: <T extends object>(proxyObject: T) => any;
export {};
